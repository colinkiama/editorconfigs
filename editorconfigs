#!/bin/sh

CONFIGS_FOLDER_NAME="configs"
PRESET_FILE_EXTENSION=".editorconfig"

# Converts relative paths to absolute paths and takes into account symlinks.
# (Required for directory listing code to work)
# https://stackoverflow.com/a/29835459/7149232
rreadlink()
{
  target=$1 fname= targetDir= CDPATH=

  # Try to make the execution environment as predictable as possible:
  # All commands below are invoked via `command`, so we must make sure that `command`
  # itself is not redefined as an alias or shell function.
  # (Note that command is too inconsistent across shells, so we don't use it.)
  # `command` is a *builtin* in bash, dash, ksh, zsh, and some platforms do not even have
  # an external utility version of it (e.g, Ubuntu).
  # `command` bypasses aliases and shell functions and also finds builtins
  # in bash, dash, and ksh. In zsh, option POSIX_BUILTINS must be turned on for that
  # to happen.
  { \unalias command; \unset -f command; } >/dev/null 2>&1
  [ -n "$ZSH_VERSION" ] && options[POSIX_BUILTINS]=on # make zsh find *builtins* with `command` too.

  while :; do # Resolve potential symlinks until the ultimate target is found.
  [ -L "$target" ] || [ -e "$target" ] || { command printf '%s\n' "ERROR: '$target' does not exist." >&2; return 1; }
      command cd "$(command dirname -- "$target")" # Change to target dir; necessary for correct resolution of target path.
      fname=$(command basename -- "$target") # Extract filename.
      [ "$fname" = '/' ] && fname='' # !! curiously, `basename /` returns '/'
      if [ -L "$fname" ]; then
        # Extract [next] target path, which may be defined
        # *relative* to the symlink's own directory.
        # Note: We parse `ls -l` output to find the symlink target
        #       which is the only POSIX-compliant, albeit somewhat fragile, way.
        target=$(command ls -l "$fname")
        target=${target#* -> }
        continue # Resolve [next] symlink target.
      fi
      break # Ultimate target reached.
    done
  targetDir=$(command pwd -P) # Get canonical dir. path
  # Output the ultimate target's canonical path.
  # Note that we manually resolve paths ending in /. and /.. to make sure we have a normalized path.
  if [ "$fname" = '.' ]; then
    command printf '%s\n' "${targetDir%/}"
  elif  [ "$fname" = '..' ]; then
    # Caveat: something like /var/.. will resolve to /private (assuming /var@ -> /private/var), i.e. the '..' is applied
    # AFTER canonicalization.
    command printf '%s\n' "$(command dirname -- "${targetDir}")"
  else
    command printf '%s\n' "${targetDir%/}/$fname"
  fi

}

show_presets()
{
	CONIFGS_DIR="${SCRIPT_DIR}/${CONFIGS_FOLDER_NAME}"
	for config_file in $CONIFGS_DIR/*
	do
		echo "$(basename "$config_file")"
	done
}

copy_preset_to_current_directory()
{
	requested_preset=$1
	preset_path=${SCRIPT_DIR}/${CONIFGS_DIR}${PRESET_FILE_EXTENSION}
	if [ -e "${preset_path}" ]
	then
		cp $preset_path "${PWD}/.editorconfig"
  else
    echo ""
	fi
}

SCRIPT_DIR=$(dirname -- "$(rreadlink "$0")")
echo "SCRIPT_DIR: ${SCRIPT_DIR}";

case $# in
	0)
    show_presets
    ;;
  1)
    copy_preset_to_current_directory
    ;;
  *)
    echo "Too many parameters.\nOnly one is required"
    ;;
esac
